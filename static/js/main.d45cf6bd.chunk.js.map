{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js","components/Feedback.module.css"],"names":["Section","title","children","className","s","FeedbackOptions","options","onLeaveFeedback","btnContainer","map","el","id","type","name","btn","onClick","Statistics","good","neutral","bad","total","positivePercentage","text","Notification","message","App","state","increment","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Number","parseFloat","Object","keys","this","Component","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QAIe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,eAAC,WAAD,WACE,oBAAIC,UAAWC,IAAEH,MAAjB,SAAyBA,IACxBC,KCHQ,SAASG,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,oBAAIJ,UAAWC,IAAEI,aAAjB,SACGF,EAAQG,KAAI,SAACC,GAAD,OACX,6BACE,wBACEC,GAAID,EACJE,KAAK,SACLC,KAAMH,EACNP,UAAWC,IAAEU,IACbC,QAAS,kBAAMR,EAAgBG,IALjC,SAOGA,KARIA,QCLF,SAASM,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IAGC,IAFDC,aAEC,MAFO,EAEP,MADDC,0BACC,MADoB,EACpB,EACD,OACE,cAAC,WAAD,UACE,+BACE,6BACE,oBAAGlB,UAAWC,IAAEkB,KAAhB,oBAA8BL,OAEhC,6BACE,oBAAGd,UAAWC,IAAEkB,KAAhB,uBAAiCJ,OAEnC,6BACE,oBAAGf,UAAWC,IAAEkB,KAAhB,mBAA6BH,EAA7B,SAEF,6BACE,oBAAGhB,UAAWC,IAAEkB,KAAhB,qBAA+BF,EAA/B,SAEF,6BACE,oBAAGjB,UAAWC,IAAEkB,KAAhB,iCAA2CD,EAA3C,eCvBK,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OACE,cAAC,WAAD,UACE,mBAAGrB,UAAWC,IAAEoB,QAAhB,SAA0BA,M,ICDXC,E,4MACnBC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,UAAY,SAACjB,GACX,EAAKkB,UAAS,SAACC,GAAD,sBACXnB,EAAKmB,EAAUnB,GAAM,O,EAI1BoB,mBAAqB,WAAO,IAAD,EACM,EAAKJ,MACpC,OAFyB,EACjBT,KADiB,EACXC,QADW,EACFC,K,EAIzBY,gCAAkC,WAAO,IAAD,EACP,EAAKL,MAA5BT,EAD8B,EAC9BA,KACFG,EAAQH,EAFwB,EACxBC,QADwB,EACfC,IAEvB,OAAOa,KAAKC,MAAMC,OAAOC,WAAW,IAAMf,GAASH,I,uDAInD,OACE,eAAC,WAAD,WACE,cAACjB,EAAD,CAASC,MAAM,wBAAf,SACE,cAACI,EAAD,CACEC,QAAS8B,OAAOC,KAAKC,KAAKZ,OAC1BnB,gBAAiB+B,KAAKX,cAI1B,cAAC3B,EAAD,CAASC,MAAM,aAAf,SACiC,IAA9BqC,KAAKR,qBACJ,cAACP,EAAD,CAAcC,QAAQ,sBAEtB,cAACR,EAAD,CACEC,KAAMqB,KAAKZ,MAAMT,KACjBC,QAASoB,KAAKZ,MAAMR,QACpBC,IAAKmB,KAAKZ,MAAMP,IAChBC,MAAOkB,KAAKR,qBACZT,mBAAoBiB,KAAKP,6C,GA3CNQ,aCCjCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCV1BC,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,aAAe,+BAA+B,IAAM,sBAAsB,KAAO,uBAAuB,QAAU,6B","file":"static/js/main.d45cf6bd.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Feedback.module.css\";\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <Fragment>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n","import React from \"react\";\r\n\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Feedback.module.css\";\r\n\r\nexport default function FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <ul className={s.btnContainer}>\r\n      {options.map((el) => (\r\n        <li key={el}>\r\n          <button\r\n            id={el}\r\n            type=\"button\"\r\n            name={el}\r\n            className={s.btn}\r\n            onClick={() => onLeaveFeedback(el)}\r\n          >\r\n            {el}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback: PropTypes.func,\r\n  optons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Feedback.module.css\";\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total = 0,\r\n  positivePercentage = 0,\r\n}) {\r\n  return (\r\n    <Fragment>\r\n      <ul>\r\n        <li>\r\n          <p className={s.text}>Good : {good}</p>\r\n        </li>\r\n        <li>\r\n          <p className={s.text}>Neutral : {neutral}</p>\r\n        </li>\r\n        <li>\r\n          <p className={s.text}>Bad : {bad} </p>\r\n        </li>\r\n        <li>\r\n          <p className={s.text}>Total : {total} </p>\r\n        </li>\r\n        <li>\r\n          <p className={s.text}>Positive feedback : {positivePercentage} %</p>\r\n        </li>\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number,\r\n  neutral: PropTypes.number,\r\n  bad: PropTypes.number,\r\n  total: PropTypes.number,\r\n  positivePercentage: PropTypes.number,\r\n};\r\n","import React, { Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Feedback.module.css\";\r\n\r\nexport default function Notification({ message }) {\r\n  return (\r\n    <Fragment>\r\n      <p className={s.message}>{message}</p>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n","import { Component, Fragment } from \"react\";\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  increment = (el) => {\n    this.setState((prevState) => ({\n      [el]: prevState[el] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return Math.round(Number.parseFloat(100 / total) * good);\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.increment}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {this.countTotalFeedback() === 0 ? (\n            <Notification message=\"No feedback given\" />\n          ) : (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          )}\n        </Section>\n      </Fragment>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n// import PropTypes from \"prop-types\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();/\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Feedback_title__2xh_X\",\"btnContainer\":\"Feedback_btnContainer__1sAhE\",\"btn\":\"Feedback_btn__3Ptz7\",\"text\":\"Feedback_text__3BZg6\",\"message\":\"Feedback_message__WFcGs\"};"],"sourceRoot":""}